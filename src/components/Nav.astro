---
import { siteName, buildNavi, staticLinks, type Page, type CalendarPage } from '../lib/api'
export interface Props {
	slug: string
}

const navi = await buildNavi()

const { slug } = Astro.props
---

<div class="mx-auto flex flex-wrap items-center justify-between py-3 md:max-w-4xl">
	<div class="pl-4">
		<a class="text-tmtGray-900 dark:text-tmtGray-400 text-xl font-bold" href="/">
			{siteName}
		</a>
	</div>

	<div class="pr-4 lg:hidden">
		<button
			type="button"
			class="border-tmtGray-600 text-tmtGray-500 hover:text-tmtGray-900 dark:hover:text-tmtGray-300 w-9.5 h-7.5 flex appearance-none items-center justify-center rounded border hover:border-teal-500"
			id="js-menu-button"
			aria-expanded="false"
			aria-controls="js-menu"
			aria-label="Navigation öffnen / schließen"
		>
			<svg
				aria-hidden="true"
				class="h-3 w-3 fill-current"
				viewBox="0 0 20 20"
				width="12"
				height="12"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path>
			</svg>
		</button>
	</div>

	<nav
		id="js-menu"
		class="dark:bg-tmtGray-900 z-20 mt-2 hidden w-full grow bg-white md:bg-transparent lg:mt-0 lg:block lg:w-auto"
	>
		<ul class="items-center justify-end lg:flex">
			{
				navi.map((item: Page | CalendarPage) => (
					<li class:list={['lg:mr-3', { 'lg:hidden': item.isHome }]}>
						<a
							class:list={[
								'text-tmtGray-650 hover:text-tmtGray-900 dark:text-tmtGray-500 dark:hover:text-tmtGray-300 block px-4 py-2 lg:inline-block',
								{
									'hover:underline': item.slug !== slug,
								},
							]}
							href={`/${item.isHome ? '' : item.slug}`}
							aria-current={item.slug === slug ? 'page' : null}
						>
							{item.title}
						</a>
					</li>
				))
			}

			{
				staticLinks.map(item => (
					<li class="lg:mr-3">
						<a
							class="text-tmtGray-650 hover:text-tmtGray-900 dark:text-tmtGray-500 dark:hover:text-tmtGray-300 block px-4 py-2 hover:underline lg:inline-block"
							href={item.url}
						>
							{item.title}
						</a>
					</li>
				))
			}
		</ul>
	</nav>
</div>

<script>
	const setupMobileNav = () => {
		let clicked = false
		const menu = document.querySelector('#js-menu')
		const button = document.querySelector('#js-menu-button')
		button.addEventListener('click', function () {
			if (clicked) return
			clicked = true
			menu.classList.toggle('hidden')
			button.setAttribute('aria-expanded', `${button.getAttribute('aria-expanded') === 'false'}`)
			requestAnimationFrame(function () {
				clicked = false
			})
		})
	}
	// https://docs.astro.build/en/guides/view-transitions/#astroafter-swap
	// runs on initial navigation
	setupMobileNav()
	// // runs on view transitions navigation
	// document.addEventListener('astro:after-swap', setupMobileNav);
</script>

<style>
	[aria-current='page'] {
		@apply text-tmtGray-900 dark:text-tmtGray-300 font-bold dark:font-semibold;
	}
</style>
